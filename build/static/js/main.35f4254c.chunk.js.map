{"version":3,"sources":["chat.d.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EventProducer","listeners","type","args","this","filter","x","listener","call","obj","push","splice","findIndex","Error","Proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","alert","message","dispatch","cid","channelId","conversations","find","lastMessages","conversation","packet","send","stringify","proxy","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","textInput","React","createRef","src","width","href","onClick","preventDefault","onChangeEmail","ref","current","sendPacket","staySignedIn","TextInputAndButton","buttonContent","ConversationCard","m","forceUpdate","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","LeftPane","firstMessage","c","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.35f4254c.chunk.js","sourcesContent":["export interface MessageDto {\r\n    id: number;\r\n    timeStamp: string;\r\n    referenceTo: number; // 0: normal message, +: update, -: delete\r\n    senderId: string;\r\n    contentType: number;\r\n    content: string;\r\n}\r\n\r\nexport interface UserDto {\r\n    id: string;\r\n    displayName: string;\r\n    tag: string;\r\n    lastSeen: string;\r\n}\r\n\r\nexport interface ConversationDto {\r\n    channelId: string;\r\n    parentChannelId: string;\r\n    name: string;\r\n    description: string;\r\n    data: string;\r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\r\n    access: number; // none, read, write, admin\r\n    notificationLevel: number; // none, gray, push\r\n    unreadCount: number;\r\n    memberIds: string[];\r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {\r\n    user: UserDto;\r\n    contacts: UserDto[];\r\n    conversations: ConversationDto[];\r\n}\r\n\r\nexport type OutgoingPacket =\r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |\r\n    { type: \"loginWithToken\", token: string } |\r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\r\n    { type: \"contactRequest\", email: string, firstMessage: string } |\r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =\r\n    { type: \"error\", message: string } |\r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |\r\n    { type: \"message\", channelId: string, message: MessageDto } |\r\n    { type: \"conversationAdded\", conversation: ConversationDto } |\r\n    { type: \"conversationRemoved\", channelId: string } |\r\n    { type: \"user\", user: UserDto };\r\n\r\nexport interface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nexport class EventProducer<M> {\r\n    private listeners: { type: string, listener, obj?: Object }[] = [];\r\n\r\n    protected dispatch(type: string, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n}\r\n\r\n\r\nexport class Proxy extends EventProducer<ProxyEventMap> {\r\n\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n\r\n    inbox: InboxDto | null = null;\r\n}\r\n\r\nexport var proxy = new Proxy();","import React, { Component } from 'react';\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>  {\r\n\r\n    state = { value: this.props.value, focus: false };\r\n    \r\n    render() {\r\n\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value} { ...attrs }\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { proxy } from \"./chat.d\";\r\nimport { TextInput } from \"./TextInput\";\r\n\r\n\r\nexport class Login extends Component {\r\n\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"/\" onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState(state => ({ register: !this.state.register })); // pass a function instead of object\r\n                    }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => this.onChangeEmail(e)} onEnter={() => this.onClick()} autofocus={true} />\r\n\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password}\r\n                    onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName} ref={this.textInput}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} />}\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                    \r\n                </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    onChangeEmail(e) {\r\n        if (e === \"A2SYE8\" || e === \"a2sye8\") {\r\n            this.setState({ displayName: \"Jankó András\" })\r\n            this.textInput.current?.setState({ value: \"Jankó András\" });\r\n        }\r\n        this.setState({ email: e })\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { TextInput, TextInputOptions } from './TextInput'\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} value=\"\" ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { InboxDto, ConversationDto, proxy } from \"./chat.d\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\"\r\nimport { ConversationCard } from \"./ConversationCard\"\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { MessageDto } from \"./chat.d\";\r\n\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId) {\r\n                this.forceUpdate();\r\n            }\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: \"A: \" + text\r\n        });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from \"./chat.d\";\n\n\nexport default class App extends Component {\n\n  state = { showLogin: true };\n\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n  }\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.state.showLogin ? <Login /> : <Main />}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as my from './chat.d';\nimport * as serviceWorker from './serviceWorker';\nexport { my };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}